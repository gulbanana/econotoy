@page "/"
@implements IAsyncDisposable
@inject IJSRuntime JS
@code {
    private readonly State state = new();
    private IJSObjectReference? module;
    private ElementReference mainElement;
    private bool viewportReady;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Pages/Index.razor.js");
            await module.InvokeVoidAsync("subscribe", mainElement, DotNetObjectReference.Create(this));
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module != null)
        {
            await module.InvokeVoidAsync("unsubscribe");
        }        
    }

    [JSInvokable]
    public void SetDimensions(int width, int height)
    {
        state.Width = width;
        state.Height = height;
        viewportReady = true;
        StateHasChanged();
    }

    private void OnUpdate(TimeSpan elapsed)
    {
        state.Tick(elapsed);
    }
}

<nav>
    <div class="commands">
        <button>Add block</button>
    </div>

    <label>
        <input type="checkbox"> Snap to grid
    </label>
</nav>

<main @ref="mainElement">
    @if (viewportReady)
    {
        <RAF UpdateState="OnUpdate">
            <svg viewBox="0 0 @(state.Width) @(state.Height)" width="@(state.Width)px" height="@(state.Height)px">
                <rect x="0" y="0" width="@state.Width" height="@state.Height" fill="rgb(200,200,255)" />
            </svg>
        </RAF>
    }
</main>